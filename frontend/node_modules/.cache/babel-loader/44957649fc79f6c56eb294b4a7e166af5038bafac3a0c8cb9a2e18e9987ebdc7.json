{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Desktop\\\\DISEASE_PREDICTION\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo } from 'react';\nimport axios from 'axios';\nimport SymptomSelector from './components/SymptomSelector';\nimport PredictionResult from './components/PredictionResult';\nimport MetaBar from './components/MetaBar';\n\n// Use relative paths if no explicit REACT_APP_API_BASE provided (works with CRA proxy)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE = process.env.REACT_APP_API_BASE || '';\nfunction App() {\n  _s();\n  const [symptoms, setSymptoms] = useState([]);\n  const [selected, setSelected] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState(null);\n  const [meta, setMeta] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const prefix = API_BASE ? `${API_BASE}` : '';\n        const [symRes, metaRes] = await Promise.all([axios.get(`${prefix}/api/symptoms`), axios.get(`${prefix}/api/metadata`)]);\n        setSymptoms(symRes.data.symptoms || []);\n        setMeta(metaRes.data);\n      } catch (e) {\n        setError('Failed to load initial data. Ensure backend is running.');\n      }\n    }\n    fetchData();\n  }, []);\n  const canPredict = useMemo(() => selected.length > 0, [selected]);\n  async function handlePredict() {\n    if (!canPredict) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const prefix = API_BASE ? `${API_BASE}` : '';\n      const res = await axios.post(`${prefix}/api/predict`, {\n        symptoms: selected\n      });\n      setResult(res.data);\n    } catch (e) {\n      var _e$response, _e$response$data;\n      setError(((_e$response = e.response) === null || _e$response === void 0 ? void 0 : (_e$response$data = _e$response.data) === null || _e$response$data === void 0 ? void 0 : _e$response$data.error) || 'Prediction failed');\n    } finally {\n      setLoading(false);\n    }\n  }\n  function handleClear() {\n    setSelected([]);\n    setResult(null);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Disease Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MetaBar, {\n      meta: meta\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(SymptomSelector, {\n      symptoms: symptoms,\n      selected: selected,\n      setSelected: setSelected\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !canPredict || loading,\n        onClick: handlePredict,\n        children: \"Predict\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClear,\n        type: \"button\",\n        disabled: loading && !result,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Predicting...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 19\n    }, this), result && /*#__PURE__*/_jsxDEV(PredictionResult, {\n      data: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: [\"Backend: \", API_BASE || 'proxy(/)', \" \", meta && `| Features: ${meta.n_features} | Classes: ${meta.n_classes}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"d66kIdZLELktAcJc9SWsx2Vpoos=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","axios","SymptomSelector","PredictionResult","MetaBar","jsxDEV","_jsxDEV","API_BASE","process","env","REACT_APP_API_BASE","App","_s","symptoms","setSymptoms","selected","setSelected","loading","setLoading","result","setResult","meta","setMeta","error","setError","fetchData","prefix","symRes","metaRes","Promise","all","get","data","e","canPredict","length","handlePredict","res","post","_e$response","_e$response$data","response","handleClear","className","children","fileName","_jsxFileName","lineNumber","columnNumber","disabled","onClick","type","n_features","n_classes","_c","$RefreshReg$"],"sources":["C:/Users/prana/OneDrive/Desktop/DISEASE_PREDICTION/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState, useMemo } from 'react';\r\nimport axios from 'axios';\r\nimport SymptomSelector from './components/SymptomSelector';\r\nimport PredictionResult from './components/PredictionResult';\r\nimport MetaBar from './components/MetaBar';\r\n\r\n// Use relative paths if no explicit REACT_APP_API_BASE provided (works with CRA proxy)\r\nconst API_BASE = process.env.REACT_APP_API_BASE || '';\r\n\r\nfunction App() {\r\n  const [symptoms, setSymptoms] = useState([]);\r\n  const [selected, setSelected] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [result, setResult] = useState(null);\r\n  const [meta, setMeta] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const prefix = API_BASE ? `${API_BASE}` : '';\r\n        const [symRes, metaRes] = await Promise.all([\r\n          axios.get(`${prefix}/api/symptoms`),\r\n          axios.get(`${prefix}/api/metadata`)\r\n        ]);\r\n        setSymptoms(symRes.data.symptoms || []);\r\n        setMeta(metaRes.data);\r\n      } catch (e) {\r\n        setError('Failed to load initial data. Ensure backend is running.');\r\n      }\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  const canPredict = useMemo(() => selected.length > 0, [selected]);\r\n\r\n  async function handlePredict() {\r\n    if (!canPredict) return;\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n  const prefix = API_BASE ? `${API_BASE}` : '';\r\n  const res = await axios.post(`${prefix}/api/predict`, { symptoms: selected });\r\n      setResult(res.data);\r\n    } catch (e) {\r\n      setError(e.response?.data?.error || 'Prediction failed');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }\r\n\r\n  function handleClear() {\r\n    setSelected([]);\r\n    setResult(null);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Disease Prediction</h1>\r\n      <MetaBar meta={meta} />\r\n      {error && <div className=\"error\">{error}</div>}\r\n      <SymptomSelector\r\n        symptoms={symptoms}\r\n        selected={selected}\r\n        setSelected={setSelected}\r\n      />\r\n      <div className=\"actions\">\r\n        <button disabled={!canPredict || loading} onClick={handlePredict}>Predict</button>\r\n        <button onClick={handleClear} type=\"button\" disabled={loading && !result}>Clear</button>\r\n      </div>\r\n      {loading && <div className=\"loading\">Predicting...</div>}\r\n      {result && <PredictionResult data={result} />}\r\n  <footer>Backend: {API_BASE || 'proxy(/)'} {meta && `| Features: ${meta.n_features} | Classes: ${meta.n_classes}`}</footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}